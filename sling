#!/usr/bin/env ruby

require 'yaml'
require 'Pathname'

$actions ={
    :enter => [
        "Enter directory",
        lambda do |map,key,file,queue| 
            if File.directory?(file)
                act_on_path file
            else
                puts "Not a directory"
            end
            return :enter,queue
        end
    ],
    :next => [
        "Next file",
        lambda do |map,key,file,queue| 
            return :next,queue
        end
    ],
    :help => [
        "Show help",
        lambda do |map,key,file,queue| 
            show_help
            return :help,queue
        end
    ],
    :exit => [
        "exit",
        lambda do |map,key,file,queue| 
            return :exit,queue
        end
    ],
    :enqueue => [
        "Put next command into queue",
        lambda do |map,key,file,queue|
            return :enqueue,queue
        end
    ],
    :show_queue => [
        "show",
        lambda do |map,key,file,queue|
            if queue != [] then 
                queue.each {|c| puts c} 
            else
                puts "empty"
            end
            return :show_queue,queue
        end
    ],
    :show_prev_cmd => [
        "Show previous command on file",
        lambda do |map,key,file,queue|
            if $prev_cmd then puts $prev_cmd
                else puts "No previous command"
                end
            return :show_prev_cmd,queue
        end
    ],
    :prev_cmd => [
        "Repeat previous command on file",
        lambda do |map,key,file,queue|
            if $prev_cmd then return do_cmd $prev_cmd,f,q 
                else return :prev_cmd,queue 
            end
        end
    ],
    :map => [
        "Map new command",
        lambda do |map,key,file,queue|
            print "Map: "
            map.merge! Hash[*STDIN.gets.split(" ",2)]
            return :map,queue
        end
    ],
    :preview => [
        "Preview file",
        lambda do |map,key,file,queue| 
            ext = file.split(".")[-1]
            previewed = false #can't return from the if ft.match 'cause mplayer causes a LocalJumpError
            $config[:filetypes].keys.each do | ft |
                if ft.match ext then 
                    do_cmd $config[:filetypes][ft],file,queue 
                    previewed = true
                    break
                end
            end
            # default handler is .
            unless previewed then do_cmd $config[:filetypes]["."],file,queue end
            return :preview,queue
        end
    ],
    :undo => [
        "Remove most recent item from queue",
        lambda do |map,key,file,queue|
            return :undo,queue[0..-2]
        end
    ]
}

def show_commands
    $actions.keys.each do |act|
        puts "#{act}\t#{$actions[act][0]}"
    end
end

def show_help map=$config[:keys],leader=""
    map.keys.each do | key |
        if map[key].class == Hash
            show_help map[key],leader + key
        else
            desc = if map[key].class == Array then map[key][1]
                   elsif map[key].class == Symbol then 
                       if $actions[map[key]] then $actions[map[key]][0]
                       else "Invalid command: :#{map[key]}" end
                   else map[key]
            end
            puts "#{leader}#{key}: #{desc}"
        end
    end
end
    

def read_key
    old_stty = `stty -g`
    system "stty cbreak -echo"
    k = STDIN.read(1)
    system "stty #{old_stty}"
    return k
end

# This expansion is before being added to command history
def early_expand cmd,f
    if $config[:abbrev] then
        $config[:abbrev].keys.each do | abbrev |
            cmd = cmd.gsub "%#{abbrev}",$config[:abbrev][abbrev] 
        end
    end
    while cmd =~ /%i/
        cmd = cmd.sub "%i",STDIN.gets.strip
    end
    return cmd
end
# This expansion is before doing the command
def expand cmd,f
    early_expand cmd,f
    cmd = cmd.gsub "%%","%" 
    cmd = cmd.gsub "::",":" 
    cmd = cmd.gsub '%f',f.gsub(/'/,"\\\\\\\\'") #escape single quote for system
    return cmd
end

def do_cmd cmd,f,q
    cmd = early_expand cmd,f
    if cmd[0,1] == "<" then
        cmd = cmd[1..-1]
    else
        $prev_cmd = cmd
    end
    if cmd.match '\?$' then 
        cmd = cmd[0..-2] 
        puts "Command is: #{cmd}"
        print "Continue [yn]:"
        key = read_key.downcase until key == 'y' or key == 'n'
        if key == 'y' then
            puts key
            #cmd has already had the trailing ? removed
        else
            puts key
            puts "Cancelled"
            return :cancelled,q
        end
    end

    if cmd.match "!$" then #queue the command
        q << cmd[0..-2] 
        return :queued,q
    else #do the command
        cmd = expand cmd,f
        return (system cmd),q
    end
end

def do_action map,file,queue,prev_key=""
    key = read_key
    case map[key] 
    when nil then
        puts "No mapping for #{prev_key}#{key}"
        return :nomap,queue
    when Hash then return do_action map[key],file,queue,key
    when Array then 
        puts map[key][0]
        if map[key][1].class == Symbol
            return $actions[map[key][1]][1].call map,key,file,queue
        else 
            return do_cmd map[key]
        end
    when Symbol 
        if $actions[map[key]]
            return $actions[map[key]][1].call map,key,file,queue
        else
            raise NotImplementedError,"Command not found: #{map[key]}"
        end
    else return do_cmd map[key],file,queue
    end
end

def act_on_file file
    unless [".",".."].include? File.basename(file)
        puts "--> #{File.basename(file)}"
        q = []
        r,q = do_action $config[:keys],file,q until ( r == :next or r == :exit)
        unless q == []
            puts "Processing queue"
            q.each do |c|
                puts c
            end
        end
        if r == :exit then exit 0 end
    end
end

def act_on_dir dir
    puts "#{dir}/"
    Dir.chdir(dir)
    Dir.foreach(dir) do | f |
        act_on_file  "#{dir}/#{f}"
    end
end

def act_on_path path
    if File.directory?(path) then 
        act_on_dir path
    else 
        act_on_file path
    end
end

def load_config
    config_file = "#{ENV['HOME']}/.slingrc"
    return YAML.load_file(config_file)
end

def at_exit
    exit 0
end
    
#m
begin
    $config = load_config
    if ARGV.count > 0
        ARGV.each do |p|
            act_on_path p
        end
    else
        act_on_path "#{ENV['PWD']}"
    end
rescue StandardError => e
    raise e
    puts e.message
    puts e.backtrace
    exit 1
end
